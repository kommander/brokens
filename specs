Checking behaviour for version 0.5.0.


  Core
    ✓ exposes isError
    ✓ creates an exception from arguments
    ✓ has a stack trace
    ✓ allows construction without the "new" keyword
    ✓ works without a reason
    ✓ gets and sets a string reason
    ✓ behaves like a stringified Error
    ✓ has hiddens
    - returns correct valueOf
    - works correctly with process.emitWarning(warning[, name][, ctor])
    ✓ works with promises
    ✓ can be thrown within promises
    - provides `return cannot.promise('to load', 'user').because({{ reason }});`
    - adding resolvers: .catch(cannot => cannot.promise('to load', 'user').then(...)
    ✓ throws an Error if no verb is given
    ✓ throws an Error if no object is given
    ✓ works without prefix
    ✓ handles non-string reasons
    ✓ handles non-string reasons of type Error
    ✓ handles null and undefined reasons
    - allows .because to be called as broken.because("reason").then(...) handler
    ✓ is possible to set the subject
    ✓ has a verb attribute
    configuration
      ✓ is configurable
      - exposes immutable config
      - keeps track of config changes
    codify
      ✓ handles false input
    #message
      ✓ returns a formulated error message
      ✓ includes a reason into the message
      ✓ handles stacked exceptions
      ✓ handles stacked exceptions (using because helper)
      - always adds " (No reason)." to the message if none was given"
    because chain
      ✓ adds a reason to the exception
      ✓ adds a thrown reason to the exception
      ✓ can rethrow with a thrown reason
    data attributes
      ✓ adds data to the exception
      ✓ returns null if no data was given
      ✓ does not overwrite with empty data
    info attributes
      ✓ adds info to the message if given
      - allows to concat info with rest arguments
    stacked info attributes
      ✓ adds info to the message if given
      ✓ adds info to the message if given (no reason)
      ✓ adds info to the message if given (all reason)

  Extension API
    ✓ exposes the use() API
    ✓ exposes the extend() API
    ✓ exposes the hook() API
    - exposes extend/hook only through use()
    use()
      ✓ calls the extension method with Cannot
      ✓ does not add an extension again
    extend()
      ✓ does not overwrite existing prototypes
      ✓ allows to add a getter
      ✓ does not add a getter multiple times
      ✓ allows to remove a getter again
      ✓ does nothin when curtailing a non existing getter
      ✓ does not add a non-function getter
      ✓ allows to extend the current instance
    hook()
      ✓ allows to remove a hook again
      ✓ allows to tap into instance creation
      ✓ throws for non-existing hook name
      ✓ throws for existing hooks
      ✓ throws for non-existing unhook name


  51 passing (107ms)
  10 pending


=============================== Coverage summary ===============================
Statements   : 100% ( 148/148 )
Branches     : 100% ( 65/65 ), 1 ignored
Functions    : 100% ( 26/26 )
Lines        : 100% ( 147/147 )
================================================================================
