Checking behaviour for version 2.3.0.


  Core
    ✓ exposes isError
    ✓ Should create an exception from arguments
    ✓ Should have a stack trace
    ✓ Should allow construction without the "new" keyword
    ✓ Should work without a reason
    ✓ should get and set a string reason
    ✓ behaves like a stringified Error
    ✓ has hiddens
    - returns correct valueOf
    - works correctly with process.emitWarning(warning[, name][, ctor])
    ✓ Should work with promises
    - provides `return cannot.promise('to load', 'user').because({{ reason }});`
    - adding resolvers: .catch(cannot => cannot.promise('to load', 'user').then(...)
    ✓ should throw an Error if no verb is given
    ✓ should throw an Error if no object is given
    ✓ should work without prefix
    ✓ should handle non-string reasons
    ✓ should NOT handle non-string reasons without _code_ attribute (except Errors)
    ✓ should handle non-string reasons of type Error
    ✓ should handle null and undefined reasons
    - allows .because to be called as broken.because("reason").then(...) handler
    ✓ should be possible to set the subject
    ✓ should have a verb attribute
    configuration
      ✓ should be configurable
      - exposes immutable config
      - keeps track of config changes
    codify
      ✓ handles false input
    #message
      ✓ Should return a formulated error message
      ✓ Should include reason into the message
      ✓ Should handle stacked exceptions
      ✓ Should handle stacked exceptions (using because helper)
      - should always add " (No reason)." to the message if none was given"
    because chain
      ✓ should add a reason to the exception
      ✓ should throw an error when setting the reason twice
    data attributes
      ✓ should add data to the exception
      ✓ data should return null if none was given
      ✓ does not overwrite with empty data
    info attributes
      ✓ should add info to the message if given
    stacked info attributes
      ✓ should add info to the message if given
    Resolves
      - collects data about unresolved brokens
      - warns or lets tap into a warning when unresolved brokens heighten their frequency
    Critical
      - lets a broken upgrade from a handle to an alert
      - provides facilities to handle alerts application wide (extension)
    Serialize
      - exposes and instance identifier (.id)
      - exposes a readable hash for comparison (.token == hash("loaduser_databasefailed_addinfo_core_45")
      - should provide a json format wrapper
      - should provide a binary format wrapper
    Security
      - has to provide facilities to whitelist allowed output
      - should distinct between user/dev/admin levels 
    Tooling
      - allows to check broken coverage
      - mincov so every broken promise has at least one additional resolver

  Extension API
    ✓ exposes the use() API
    ✓ exposes the extend() API
    ✓ exposes the hook() API
    - exposes extend/hook only through use()
    use()
      ✓ calls the extension method with Cannot
      ✓ does not add an extension again
    extend()
      ✓ does not overwrite existing prototypes
      ✓ allows to add a getter
      ✓ does not add a getter multiple times
      ✓ allows to remove a getter again
      ✓ does nothin when curtailing a non existing getter
      ✓ does not add a non-function getter
      ✓ allows to extend the current instance
    hook()
      ✓ allows to remove a hook again
      ✓ allows to tap into instance creation
      ✓ throws for non-existing hook name
      ✓ throws for existing hooks
      ✓ throws for non-existing unhook name

  Handling/Assert Extension
    ✓ provides a convenience checker (verb/object)
    ✓ provides a convenience checker (multiword verb/object)
    ✓ provides a convenience checker (error code)
    ✓ provides a convenience checker (verb / object, assert.cannot, because)
    ✓ provides a convenience checker (verb/object, is.cannot, because)
    ✓ assert is bound correctly to this.is
    ✓ allows to recover from a specific reason (error code, assert.cannot)
    ✓ recovers from a specific reason (error code, assert.cannot, other err object)
    ✓ allows to recover from a specific reason (error code, is.cannot)
    ✓ allows to recover from a specific reason (error code, is.cannot, false cannot)
    ✓ provides a convenience checker (verb/object, is.cannot)
    ✓ provides a convenience checker (verb/object, true())
    ✓ provides a convenience checker (verb/object, false())
    ✓ provides a convenience checker (verb/object, weak comparison)
    ✓ provides a convenience checker (verb/object, if clause)
    - provides a convenience checker (verb/object, weak comparison, if clause)
    ✓ provides a convenience checker (verb/object, weak comparison, reverse)
    - provides a convenience checker (verb/object, hard comparison)
    ✓ provides a convenience checker (verb/object, hard comparison, !!)
    ✓ provides a convenience checker (verb/object, hard comparison, !)
    ✓ provides a convenience checker (verb/object, false, revert)
    ✓ allows to recover from a specific reason (verb/object, because.cannot)
    ✓ allows to recover from a specific reason (verb/object, assert.cannot)
    ✓ recovers from a specific reason (verb/object, because.cannot, false cannot)
    ✓ checks case insensitive

  Handlor Extension
    ✓ provides a convenience method to handle an error (one handler)
    ✓ provides the handlor interface swell
    ✓ handles an error (one handler, reason)
    ✓ handles an error (one handler, reason, multiword)
    ✓ handles an error (one handler, reason, stacked error)
    ✓ provides reason as first, full error instance as second argument
    ✓ handles an error (one handler, reason, obj)
    ✓ handles an error (one handler, obj, obj)
    with interface
      ✓ hands down the reason first, second the error
      ✓ calls in error context
      ✓ convenience methods to handle an error can be stacked
      ✓ reacts on specific reason with handler

  Tooling
    - has a pre-commit hook to check if the specs changed and update them for the commit


  83 passing (115ms)
  24 pending

